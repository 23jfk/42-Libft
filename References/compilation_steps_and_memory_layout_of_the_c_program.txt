1 . COMPILATION STEPS AND LAYOUT OF THE C PROGRAME:
	
	1.1 . What are the four stages of the compilation process ?
		.Preprocessing
		.complilation
		.Assembly
		.Linking

	1.2 . Preprocessing :
		* the first stage of compilation.
		* the first step in preprocessing is free comments (Delete comments) in the file.c
		* the second step is produce the contents of the "#include <header.h>" header file joined
		with the contents of the file.c.
		* To print result of preprocessing stage, pass the -E option to cc:
					"cc -E hello_world.c"

	1.3 . Compilation :
		* in this stage the preprocessing code translate to assembly instructions aspecific to
		the target processor architecture, These form an intermediate human-readable language.
		* To save the result of the compilation stage, pass the -S option to cc:
					"cc -S hello_world.c"
		if you run this commende it will create a file named hello_world.s

	1.4 . Assembly :
		* in this stage assembler translate the assembly instructions to machine code, or object code.
		* To save the result of the assembly stage, pass the -c option to cc:

					"cc -c hello_world.c"
		* Running the above command will create a file named hello_world.o, containing the object 
		code of the program.
		* The contents of this file are in a binary format and can be inspected using hexdump or od 
		by running either one of the following commands:
					"hexdump hello_world.o"
					"od -c hello_world.o"
		
	1.5 . Linking :
		* The object code generated in the assembly stage is composed of machine instructions that the processor 
		understands but some pieces of the program are out of order or missing. To produce an executable program, 
		the existing pieces have to be rearranged and the missing ones filled in. This process is called linking.
					"cc -o hello_world hello_world.c"
		

	For your quick reference :
		 https://embetronicx.com/wp-content/uploads/2017/12/Compilation-Steps.png


2 . Memory Layout of the C Program :

	text / Code Segment
	initialized Data Segment
	Uninitialized Data Segments (bss)
	Heap
	stack

	* Low address to High address

	this for explin Mmory Layout of C Programs :
		https://www.youtube.com/watch?v=UFUbMV2O3R4
		

https://embetronicx.com/tutorials/p_language/c/compilation-steps-and-memory-layout-of-the-c-program/#Memory_Layout_of_the_C_Program

